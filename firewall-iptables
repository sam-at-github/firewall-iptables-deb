#!/bin/bash -e
### BEGIN INIT INFO
# Provides:          firewall-iptables
# Required-Start:    networking network-manager
# Required-Stop:     $remote_fs $syslog
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: very basic iptables firewall, and port forwarding setup.
# Description: Mostly copied from David A. Ranch (http://www.ecst.csuchico.edu/~dranch). Rewritten here as an debian Linux init script.
#              You'll probably have to edit default port list, and interface names.
### END INIT INFO

PATH=/sbin:/usr/sbin:/bin:/usr/bin
DESC="Basic iptables firewall"
NAME=firewall-iptables
DAEMON=/usr/sbin/$NAME
DAEMON_ARGS="--options args"
PIDFILE=/var/run/$NAME.pid
SCRIPTNAME=/etc/init.d/$NAME
LIBDIR=/usr/lib
CONF=/etc/default/"$NAME"
FWVER=0.76
IPTABLES=/sbin/iptables

# Default ports and interfaces. TODO: detected on init, and overridden in defaults/
# Interfaces only relevant to forwarding.
EXTIF="wlan0"
INTIF="eth0"
ENABLE_FORWARDING= # No by default.
INBOUND_TCP_ALLOW=""
INBOUND_UDP_ALLOW=""

# Read configuration variable file if it is present.
[ -r "$CONF" ] && . "$CONF"
# Load the VERBOSE setting and other rcS variables
. /lib/init/vars.sh
# Define LSB log_* functions. Depend on lsb-base (>= 3.2-14) to ensure that this file is present and status_of_proc is working.
. /lib/lsb/init-functions
# Load our libs.
. "$LIBDIR"/firewall-iptables-functions.sh
# Check that networking is up.
[[ "${NETWORKING}" = "no" ]] && exit 0

function do_start()
{
  echo "Starting simple firewall-iptables version $FWVER:"
  echo "   External Interface:  $EXTIF"
  echo "   Internal Interface:  $INTIF"
  # Enable IP forwarding since it is disabled by default since
  # Redhat Users:  you may try changing the options in /etc/sysconfig/network from:
  # FORWARD_IPV4=false to FORWARD_IPV4=true
  echo "   Enabling forwarding.."
  echo "1" > /proc/sys/net/ipv4/ip_forward
  echo "   Enabling DynamicAddr.."
  echo "1" > /proc/sys/net/ipv4/ip_dynaddr
  set_firewall_rules
  set_forward_rules
  echo -n "firewall-iptables v$FWVER done."
  success
  echo
  return 0
}

function do_stop()
{
  echo "Stopping firewall-iptables:"
  clear_firewall_chains
  clear_forward_chains
  echo -n "Warning: default permissive policy set."
  success
  echo
  return 0
}

function do_restart()
{
  $0 stop
  $0 start
  return $?
}

function do_status()
{
  $IPTABLES -L
  return 0
}

function success()
{
  echo -n ""
}

case "$1" in
  start)
    [ "$VERBOSE" != no ] && log_daemon_msg "Starting $DESC" "$NAME"
    do_start
    case "$?" in
      0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
      2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
    esac
  ;;
  stop)
    [ "$VERBOSE" != no ] && log_daemon_msg "Stopping $DESC" "$NAME"
    do_stop
    case "$?" in
      0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
      2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
    esac
  ;;
  #status)
  #
  #;;
  restart|force-reload)
  #
  # If the "reload" option is implemented then remove the
  # 'force-reload' alias
  #
  log_daemon_msg "Restarting $DESC" "$NAME"
  do_stop
  case "$?" in
    0|1)
      do_start
      case "$?" in
        0) log_end_msg 0 ;;
        1) log_end_msg 1 ;; # Old process is still running
        *) log_end_msg 1 ;; # Failed to start
      esac
    ;;
    *)
      # Failed to stop
    log_end_msg 1
    ;;
  esac
  ;;
  *)
    #echo "Usage: $SCRIPTNAME {start|stop|restart|reload|force-reload}" >&2
    echo "Usage: $SCRIPTNAME {start|stop|restart|force-reload}" >&2
    exit 3
  ;;
esac
