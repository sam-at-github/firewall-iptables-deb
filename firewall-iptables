#!/bin/bash -e
### BEGIN INIT INFO
# Provides:          firewall-iptables
# Required-Start:    networking firewall-custom-iptables
# Required-Stop:     $remote_fs $syslog
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Very basic iptables port only firewall. You have to handle hosts in another layer..
# Description: Mostly copied from David A. Ranch (http://www.ecst.csuchico.edu/~dranch). Rewritten here as an debian Linux init script.
#              You'll probably have to edit default port list, and interface names.
### END INIT INFO

PATH=/sbin:/usr/sbin:/bin:/usr/bin
DESC="Basic iptables firewall"
NAME=firewall-iptables
DAEMON=/usr/sbin/$NAME
DAEMON_ARGS="--options args"
PIDFILE=/var/run/$NAME.pid
SCRIPTNAME=/etc/init.d/$NAME
CONFFILE=/etc/default/"$NAME"
FIREWALL_SCRIPT_DIR=./scripts.d

# Check that networking is up.
[[ "${NETWORKING}" = "no" ]] && exit 0
# Read configuration variable file if it is present.
[ -r "$CONFFILE" ] && . "$CONFFILE"
# Load the VERBOSE setting and other rcS variables
. /lib/init/vars.sh
# Define LSB log_* functions. Depend on lsb-base (>= 3.2-14) to ensure that this file is present and status_of_proc is working.
. /lib/lsb/init-functions

# Set up firewall.
# -ve bias by default - rejects stuff that does not pass.
function set_firewall_rules()
{
  run-parts --regex="[0-9]{3}-[a-z-]*" --report --arg=start "$FIREWALL_SCRIPT_DIR"
}

function clear_firewall_chains()
{
  run-parts --regex="[0-9]{3}-[a-z-]*" --report --arg=stop "$FIREWALL_SCRIPT_DIR"
}

function do_start()
{
  echo "Starting simple firewall-iptables."
  set_firewall_rules
  echo -n "Started firewall-iptables."
  success
  echo
  return 0
}

function do_stop()
{
  echo "Stopping firewall-iptables."
  clear_firewall_chains
  echo -n "Stopped firewall-iptables."
  success
  echo
  return 0
}

function do_restart()
{
  $0 stop
  $0 start
  return $?
}

function do_status()
{
  $IPTABLES -L
  return 0
}

function success()
{
  echo -n ""
}

function do_run()
{
  case "$1" in
    start)
      [ "$VERBOSE" != no ] && log_daemon_msg "Starting $DESC" "$NAME"
      do_start
      case "$?" in
        0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
        2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
      esac
    ;;
    stop)
      [ "$VERBOSE" != no ] && log_daemon_msg "Stopping $DESC" "$NAME"
      do_stop
      case "$?" in
        0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
        2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
      esac
    ;;
    restart|force-reload)
      # If the "reload" option is implemented then remove the
      # 'force-reload' alias
      log_daemon_msg "Restarting $DESC" "$NAME"
      do_stop
      case "$?" in
        0|1)
          do_start
          case "$?" in
            0) log_end_msg 0 ;;
            1) log_end_msg 1 ;; # Old process is still running
            *) log_end_msg 1 ;; # Failed to start
          esac
        ;;
        *)
          # Failed to stop
        log_end_msg 1
        ;;
      esac
    ;;
    *)
      #echo "Usage: $SCRIPTNAME {start|stop|restart|reload|force-reload}" >&2
      echo "Usage: $SCRIPTNAME {start|stop|restart|force-reload}" >&2
      exit 3
    ;;
  esac
  return 0;
}

do_run "$@"
exit 0;
